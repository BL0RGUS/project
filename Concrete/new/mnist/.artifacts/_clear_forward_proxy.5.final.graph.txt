 %0 = _x                                                                                                           # EncryptedTensor<int8, shape=(1, 1, 28, 28)>          ∈ [-128, 127]
 %1 = ones()                                                                                                       # EncryptedTensor<uint1, shape=(1, 1, 30, 30)>         ∈ [1, 1]
 %2 = -95                                                                                                          # ClearScalar<int8>                                    ∈ [-95, -95]
 %3 = multiply(%1, %2)                                                                                             # EncryptedTensor<int8, shape=(1, 1, 30, 30)>          ∈ [-95, -95]
 %4 = (%3[:, :, 1:29, 1:29] = %0)                                                                                  # EncryptedTensor<int8, shape=(1, 1, 30, 30)>          ∈ [-128, 127]
 %5 = [[[[ -8  3 ... 63  11]]]]                                                                                    # ClearTensor<int8, shape=(5, 1, 3, 3)>                ∈ [-94, 127]               @ /conv1/Conv.conv
 %6 = conv2d(%4, %5, [0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)                    # EncryptedTensor<int17, shape=(1, 5, 28, 28)>         ∈ [-57537, 56956]          @ /conv1/Conv.conv
 %7 = round_bit_pattern(%6, lsbs_to_remove=11, overflow_protection=False, exactness=Exactness.EXACT)               # EncryptedTensor<int17, shape=(1, 5, 28, 28)>         ∈ [-57344, 57344]          @ /conv1/Conv.conv_rounding
 %8 = subgraph(%7)                                                                                                 # EncryptedTensor<uint8, shape=(1, 5, 28, 28)>         ∈ [0, 254]
 %9 = ones()                                                                                                       # EncryptedTensor<uint1, shape=(1, 5, 30, 30)>         ∈ [1, 1]
%10 = 0                                                                                                            # ClearScalar<uint1>                                   ∈ [0, 0]
%11 = multiply(%9, %10)                                                                                            # EncryptedTensor<uint1, shape=(1, 5, 30, 30)>         ∈ [0, 0]
%12 = (%11[:, :, 1:29, 1:29] = %8)                                                                                 # EncryptedTensor<uint8, shape=(1, 5, 30, 30)>         ∈ [0, 254]
%13 = [[[[  21   ... 4  -46]]]]                                                                                    # ClearTensor<int8, shape=(10, 5, 3, 3)>               ∈ [-127, 125]              @ /conv2/Conv.conv
%14 = conv2d(%12, %13, [0 0 0 0 0 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(2, 2), dilations=(1, 1), group=1)        # EncryptedTensor<int18, shape=(1, 10, 14, 14)>        ∈ [-43170, 68079]          @ /conv2/Conv.conv
%15 = round_bit_pattern(%14, lsbs_to_remove=12, overflow_protection=False, exactness=Exactness.EXACT)              # EncryptedTensor<int18, shape=(1, 10, 14, 14)>        ∈ [-45056, 69632]          @ /conv2/Conv.conv_rounding
%16 = subgraph(%15)                                                                                                # EncryptedTensor<uint8, shape=(1, 10, 14, 14)>        ∈ [0, 255]
%17 = reshape(%16, newshape=(1, 1960))                                                                             # EncryptedTensor<uint8, shape=(1, 1960)>              ∈ [0, 255]
%18 = [[ -4 -10  ...   29 -24]]                                                                                    # ClearTensor<int8, shape=(1960, 10)>                  ∈ [-106, 127]              @ /fc1/Gemm.matmul
%19 = matmul(%17, %18)                                                                                             # EncryptedTensor<int21, shape=(1, 10)>                ∈ [-164890, 897348]        @ /fc1/Gemm.matmul
%20 = round_bit_pattern(%19, lsbs_to_remove=15, overflow_protection=False, exactness=Exactness.EXACT)              # EncryptedTensor<int21, shape=(1, 10)>                ∈ [-163840, 884736]        @ /fc1/Gemm.matmul_rounding
%21 = subgraph(%20)                                                                                                # EncryptedTensor<uint8, shape=(1, 10)>                ∈ [0, 255]
%22 = [[ -53  11 ...  89 -101]]                                                                                    # ClearTensor<int8, shape=(10, 10)>                    ∈ [-127, 117]              @ /fc2/Gemm.matmul
%23 = matmul(%21, %22)                                                                                             # EncryptedTensor<int17, shape=(1, 10)>                ∈ [-46459, 46837]          @ /fc2/Gemm.matmul
return %23

Subgraphs:

    %8 = subgraph(%7):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 5, 28, 28)>          @ /conv1/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 5, 28, 28)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 5, 28, 28)>
         %4 = [[[[ 1045] ... [13585]]]]        # ClearTensor<int15, shape=(1, 5, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 5, 28, 28)>
         %6 = 9.268524155502533e-05            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 5, 28, 28)>
         %8 = [[[[-0.013 ... 671166]]]]        # ClearTensor<float32, shape=(1, 5, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 5, 28, 28)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 5, 28, 28)>
        %12 = 0.019100847788670546             # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 5, 28, 28)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 5, 28, 28)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 5, 28, 28)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 5, 28, 28)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 5, 28, 28)>
        return %20

    %16 = subgraph(%15):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 10, 14, 14)>          @ /conv2/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 10, 14, 14)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 10, 14, 14)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 10, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 10, 14, 14)>
         %6 = 0.00011569159518310057           # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 10, 14, 14)>
         %8 = [[[[ 0.417 ... 758337]]]]        # ClearTensor<float32, shape=(1, 10, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 10, 14, 14)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 10, 14, 14)>
        %12 = 0.030714080024451373             # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 10, 14, 14)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 10, 14, 14)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 10, 14, 14)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 10, 14, 14)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 10, 14, 14)>
        return %20

    %21 = subgraph(%20):

         %0 = input                            # EncryptedTensor<uint11, shape=(1, 10)>         @ /fc1/Gemm.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 10)>        @ /fc1/Gemm.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 10)>
         %4 = [[0 0 0 0 0 0 0 0 0 0]]          # ClearTensor<uint1, shape=(1, 10)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 10)>
         %6 = 1.8095586648275814e-05           # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 10)>
         %8 = [ 0.014393 ... .00067668]        # ClearTensor<float32, shape=(10,)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 10)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 10)>
        %12 = 0.06302612357167402              # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 10)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 10)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 10)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 10)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 10)>
        return %20
